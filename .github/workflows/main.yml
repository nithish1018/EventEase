name: CI/CD Pipeline
on:
  push:
    branches:
      - main

env:
  PG_DATABASE: EventEase_database_test
  PG_USER: postgres
  PG_PASSWORD: ${{ secrets.DB_PWD }}
  SECRET: ${{ secrets.SECRET }}

jobs:
  run-tests:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: ${{ secrets.DB_PWD }}
          POSTGRES_DB: EventEase_database_test
          SECRET: ${{ secrets.SECRET }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Install dependencies
        run: cd backend && npm ci
      - name: Run unit tests
        id: unit-tests
        run: cd backend && npm test
      - name: Run the app
        id: run-app
        run: |
          cd backend
          npm install
          npx sequelize-cli db:drop
          npx sequelize-cli db:create
          npx sequelize-cli db:migrate
          PORT=3000 npm start &
          sleep 5
      - name: Run integration tests
        id: integration-tests
        run: |
          cd backend
          npm install cypress cypress-json-results
          npx cypress run

  build-and-deploy:
    needs: [run-tests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t my-node-app .

      - name: Push Docker image to registry
        run: docker push my-node-app:latest

      - name: SSH Deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            docker-compose -f docker-compose.yml pull
            docker-compose -f docker-compose.yml up -d

  notifications:
    needs: [run-tests, build-and-deploy]
    runs-on: ubuntu-latest
    if: ${{ always() }}
    steps:
      - name: Notify Slack
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SECRET_NAME }}
        run: |
          if [[ ${{ needs.run-tests.result }} == 'success' && ${{ needs.build-and-deploy.result }} == 'success' ]]; then
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Automated tests for EventEase completed successfully. \nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $SLACK_WEBHOOK_URL
          else
            curl -X POST -H 'Content-type: application/json' --data '{"text":"Automated tests for EventEase failed.\nCheck the logs for details: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"}' $SLACK_WEBHOOK_URL
          fi
